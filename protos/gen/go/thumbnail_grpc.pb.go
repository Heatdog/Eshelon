// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: thumbnail.proto

package ssov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Thumbnail_Get_FullMethodName = "/thumbnail.Thumbnail/Get"
)

// ThumbnailClient is the client API for Thumbnail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThumbnailClient interface {
	Get(ctx context.Context, in *ThumbnailRequest, opts ...grpc.CallOption) (Thumbnail_GetClient, error)
}

type thumbnailClient struct {
	cc grpc.ClientConnInterface
}

func NewThumbnailClient(cc grpc.ClientConnInterface) ThumbnailClient {
	return &thumbnailClient{cc}
}

func (c *thumbnailClient) Get(ctx context.Context, in *ThumbnailRequest, opts ...grpc.CallOption) (Thumbnail_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Thumbnail_ServiceDesc.Streams[0], Thumbnail_Get_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &thumbnailGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Thumbnail_GetClient interface {
	Recv() (*ThumbnailResponse, error)
	grpc.ClientStream
}

type thumbnailGetClient struct {
	grpc.ClientStream
}

func (x *thumbnailGetClient) Recv() (*ThumbnailResponse, error) {
	m := new(ThumbnailResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ThumbnailServer is the server API for Thumbnail service.
// All implementations must embed UnimplementedThumbnailServer
// for forward compatibility
type ThumbnailServer interface {
	Get(*ThumbnailRequest, Thumbnail_GetServer) error
	mustEmbedUnimplementedThumbnailServer()
}

// UnimplementedThumbnailServer must be embedded to have forward compatible implementations.
type UnimplementedThumbnailServer struct {
}

func (UnimplementedThumbnailServer) Get(*ThumbnailRequest, Thumbnail_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedThumbnailServer) mustEmbedUnimplementedThumbnailServer() {}

// UnsafeThumbnailServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThumbnailServer will
// result in compilation errors.
type UnsafeThumbnailServer interface {
	mustEmbedUnimplementedThumbnailServer()
}

func RegisterThumbnailServer(s grpc.ServiceRegistrar, srv ThumbnailServer) {
	s.RegisterService(&Thumbnail_ServiceDesc, srv)
}

func _Thumbnail_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ThumbnailRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ThumbnailServer).Get(m, &thumbnailGetServer{stream})
}

type Thumbnail_GetServer interface {
	Send(*ThumbnailResponse) error
	grpc.ServerStream
}

type thumbnailGetServer struct {
	grpc.ServerStream
}

func (x *thumbnailGetServer) Send(m *ThumbnailResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Thumbnail_ServiceDesc is the grpc.ServiceDesc for Thumbnail service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Thumbnail_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thumbnail.Thumbnail",
	HandlerType: (*ThumbnailServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Thumbnail_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "thumbnail.proto",
}
